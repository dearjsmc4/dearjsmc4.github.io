<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rudy&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://dearjsmc4.github.io/"/>
  <updated>2019-05-03T02:25:22.616Z</updated>
  <id>https://dearjsmc4.github.io/</id>
  
  <author>
    <name>Hwang Yu-Soon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>블로그 공사</title>
    <link href="https://dearjsmc4.github.io/2019/05/03/diary/"/>
    <id>https://dearjsmc4.github.io/2019/05/03/diary/</id>
    <published>2019-05-03T02:23:30.000Z</published>
    <updated>2019-05-03T02:25:22.616Z</updated>
    
    <content type="html"><![CDATA[<p>깃헙 블로그를 시작해보려고 했는데<br>공사만 며칠 걸린건지….<br>테마가 중국에서 만들어진거라서<br>눈에 보이는 알 수 없는 한자들을 찾아서 지우고<br>url 주소 연결때문에 골치 썩다보니<br>시간이 너무 많이 흘렀다.<br>그래도 다 해놓고 나니까 개운하군  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;깃헙 블로그를 시작해보려고 했는데&lt;br&gt;공사만 며칠 걸린건지….&lt;br&gt;테마가 중국에서 만들어진거라서&lt;br&gt;눈에 보이는 알 수 없는 한자들을 찾아서 지우고&lt;br&gt;url 주소 연결때문에 골치 썩다보니&lt;br&gt;시간이 너무 많이 흘렀다.&lt;br&gt;그래도 다 
      
    
    </summary>
    
      <category term="잡담" scheme="https://dearjsmc4.github.io/categories/%EC%9E%A1%EB%8B%B4/"/>
    
    
  </entry>
  
  <entry>
    <title>예습과 질문정리(2)</title>
    <link href="https://dearjsmc4.github.io/2019/05/02/0502/"/>
    <id>https://dearjsmc4.github.io/2019/05/02/0502/</id>
    <published>2019-05-02T11:47:59.000Z</published>
    <updated>2019-05-03T01:21:49.980Z</updated>
    
    <content type="html"><![CDATA[<h2 id="7-제어문"><a href="#7-제어문" class="headerlink" title="7. 제어문"></a>7. 제어문</h2><p>코드는 원래 위에서부터 아래로 흐르며 순차적으로 진행되지만<br>제어문을 사용하게 되면 그 흐름을 깨고 실행순서를 인위적으로 변경할 수 있다.<br>그러나 코드의 흐름을 혼란스럽게 해 가독성을 해칠 수 있다.  </p><h3 id="조건문"><a href="#조건문" class="headerlink" title="조건문"></a>조건문</h3><p>주어진 조건식의 평가 결과(불리언 값)에 따라 코드 블록의 실행을 결정한다.  </p><ul><li>블록문<br>0개 이상의 문을 중괄호로 묶은 것으로, 코드 블록 또는 블록이라고 부르기도 한다.  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">질문1: 0개 이상이라는 것은 빈 블록도 가능하다는 뜻인가요. 빈 블록은 언제, 왜 쓰는 것인가요?</span><br></pre></td></tr></table></figure></li></ul><p>만약 조건식의 평가 결과가 불리언값이 아니면 불리언값으로 강제 변환된다. 조건식의 평가 결과가 true 일 경우 if문 다음의 코드 블록이 실행되고, false 일 경우 else문 다음의 코드 블록이 실행된다. else if문을 사용해 조건식을 여러 개 추가할 수도 있다. if문과 else문은 2번 이상 사용할 수 없고, else if문은 여러 번 사용할 수 있다. 코드 블록 내에 문이 하나 뿐일 때에는 중괄호를 생략할 수도 있다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">질문2:  </span><br><span class="line">같은 함수 안에 if문을 두 번 써도 에러는 안 나는데 그냥 통상적으로 if는 두 번 쓰지 않기로 약속한 것인가요?</span><br></pre></td></tr></table></figure></p><ul><li>삼항 조건 연산자로 바꿔쓰기<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a = 1;</span><br><span class="line">a === 1 ? &apos;맞다&apos; : &apos;아니다&apos;;</span><br></pre></td></tr></table></figure></li></ul><p>변수 a 에 값 1 을 할당하고<br>a 가 1 이면 ‘맞다’, 아니면 ‘아니다’ 를 반환한다.<br>삼항 조건 연산자 표현식은 값처럼 사용할 수 있으나 if…else 문은 값처럼 사용할 수 없다.  </p><ul><li>switch 문<br>switch 문은 다양한 상황(case)에 따라 실행할 코드 블록을 결정할 때 사용된다.<br>if…else 문과 다른 점은, 코드 블록이 중괄호로 묶여 있지 않고 case문에 해당하는 문의 마지막에 break; 를 걸어주지 않으면 다음 case문으로 폴스루된다는 것이다.<br><strong>폴스루</strong>: break 문이 없다면 표현식과 일치하는 case 문에 해당하는 문을 실행한 후 switch 문을 탈출하지 않고 다음 case 문으로 넘어가서 표현식이 일치하지 않더라도 case 문을 실행하게 된다.  </li></ul><h3 id="반복문"><a href="#반복문" class="headerlink" title="반복문"></a>반복문</h3><p>주어진 조건식의 평가 결과가 true 인 경우에 코드 블록을 실행하고, 조건식이 거짓이 될 때까지 반복한다.  </p><ul><li><p>for 문<br>조건식이 거짓이 될 때까지 코드블록을 반복 실행한다. 아래의 형태가 일반적인 for 문이며 for 문을 중첩하여 쓸 수도 있다.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for([변수 선언문 또는 할당문]; [조건식]; [증감식])</span><br><span class="line">&#123;</span><br><span class="line">    실행할 코드</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>while 문<br>주어진 조건식의 평가 결과가 참이면 코드 블록을 반복 실행하고 조건식의 평가 결과가 거짓이 되면 실행을 종료한다.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">while([조건식])&#123;</span><br><span class="line">    [실행할 코드]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>조건식이 언제나 참이고 탈출 조건이 명시되어 있지 않으면 while 문은 무한으로 반복하게 된다.<br>코드 블록 내에 if 문으로 탈출 조건을 만들고 break 를 걸어서 탈출할 수 있다.  </p><ul><li>do…while 문<br>while 문과 비슷하지만, 코드 블록을 최소 한 번은 무조건 실행한 후에 조건식을 확인한다.  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">do&#123;</span><br><span class="line">    [실행할 코드]</span><br><span class="line">&#125; while([조건식])</span><br></pre></td></tr></table></figure></li></ul><h3 id="break-문"><a href="#break-문" class="headerlink" title="break 문"></a>break 문</h3><p>레이블 문, 반복문, switch 문의 코드 블록을 탈출한다. </p><ul><li>레이블 문 : 식별자가 붙은 문  </li></ul><h3 id="continue-문"><a href="#continue-문" class="headerlink" title="continue 문"></a>continue 문</h3><p>반복문의 코드 블록 실행을 중단하고 증감식으로 이동한다.  </p><h2 id="8-타입-변환과-단축-평가"><a href="#8-타입-변환과-단축-평가" class="headerlink" title="8. 타입 변환과 단축 평가"></a>8. 타입 변환과 단축 평가</h2><p>개발자가 의도적으로 값의 타입을 변환하는 것을 <strong>명시적 타입 변환</strong>(Explicit coercion) 또는 타입 캐스팅(Type casting) 이라고 한다. 반면 개발자의 의도와 상관없이 자바스크립트 엔진이 암묵적으로 타입을 변환하는 것은 <strong>암묵적 타입 변환</strong>(Implicit coercion) 또는 타입 강제변환(Type coercion) 이라고 한다.<br><code>x.toString()</code> 이나 <code>x + &#39;&#39;</code> 등의 방법으로 타입 변환을 한다고 해도 원래 변수 x의 타입이 변하는 것은 아니다.  </p><ul><li><p>암묵적 타입 변환이 어떻게 실행될까  </p><ol><li><code>+</code> 연산자는 피연산자 중 하나 이상이 문자열이면 문자열 연결 연산자로 동작한다. 따라서 문자열 타입이 아닌 피연산자를 <strong>문자열 타입</strong>으로 변환한다.  </li><li>산술 연산자는 숫자 값을 만들어야 하므로, 숫자 타입이 아닌 피연산자를 모두 숫자 타입으로 변환한다. 비교 연산자나 단항 연산자도 마찬가지다. 만약 피연산자를 <strong>숫자 타입</strong>으로 바꿀 수 없을 때에는 NaN 의 결과가 나온다.  </li><li>if 문이나 for 문 같은 제어문이나 삼항 조건 연산자의 조건식은 참/거짓 을 반환해야 하므로 조건식의 평가 결과를 Truthy 값 또는 Falsy 값으로 구분하여 <strong>불리언 타입</strong>으로 암묵적 변환한다. </li></ol></li><li><p>명시적 타입 변환  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">질문3: 명시적 타입 변환 방법 중에 true * 1 가 있는데, 이 표현식의 평가 결과가 1로 나오는 것은 </span><br><span class="line">산술 연산자 * 가 있고 산술 연산자는 숫자 값을 만들어야 하기 때문에 숫자타입이 아닌 true 를 </span><br><span class="line">자바스크립트 엔진이 암묵적으로 숫자 타입으로 바꾸는 암묵적 타입 변환 아닌가요?  </span><br><span class="line">산술연산자를 이용해 타입 변환을 하는 것은 명시적 타입 변환인가요, 암묵적 타입 변환인가요?</span><br></pre></td></tr></table></figure></li><li><p>단축 평가<br>논리곱 연산자 <code>&amp;&amp;</code> 와 논리합 연산자 <code>||</code> 는 논리 평가를 결정한 피연산자를 그대로 반환한다.  </p></li></ul><ul><li><em>단축 평가를 사용한 매개변수의 기본값 설정에서 헷갈렸던 부분 정리</em>  </li></ul><p><code>undefined &amp;&amp; true</code><br>undefined 은 falsy 값이므로 false 로 간주되어 undefined 을 반환한다.<br><code>undefined || true</code><br>undefined 이 falsy 값이어도 두 번째 피연산자가 true 인지 확인해야 하므로 true 를 반환한다.  </p><p>따라서<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function getStringLength(str) &#123;</span><br><span class="line">  str = str || &apos;&apos;;</span><br><span class="line">  return str.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>undefined || &#39;&#39;;</code><br>getStringLength() 함수는 인자를 전달받지 않았을 경우 매개변수에 undefined 가 할당되고,<br>undefined 는 falsy 값이므로 두 번째 피연산자까지 확인한 후 빈 문자열 ‘’ 을 반환한다.<br>함수는 undefined 의 length 가 아니라 빈 문자열의 length(0) 를 반환하게 된다.  </p><h2 id="9-객체-리터럴"><a href="#9-객체-리터럴" class="headerlink" title="9. 객체 리터럴"></a>9. 객체 리터럴</h2><p>자바스크립트의 객체는 키(key)와 값(value)으로 구성된 프로퍼티(property)들의 집합이다. 프로퍼티들은 쉼표로 구분한다. 객체 리터럴은 중괄호 내에 0개 이상의 프로퍼티를 정의한다.  </p><ul><li><p>프로퍼티의 키  </p><ul><li>빈 문자열을 포함하여 모든 문자열 또는 symbol 값을 사용할 수 있다.  </li><li>그러나 빈 문자열은 키로서의 의미를 갖지 못하므로 권장하지 않는다.  </li><li>문자열이나 symbol 값 외의 값을 사용하면 암묵적 타입 변환을 통해 문자열이 된다.  </li><li>식별자 네이밍 규칙을 준수하지 않는 프로퍼티 키의 경우 반드시 따옴표를 사용해야 한다.  </li><li>var, function 과 같은 예약어를 프로퍼티 키로 사용해도 에러는 없지만 권장하지 않는다.  </li><li>프로퍼티 키를 중복선언하면 나중에 선언한 프로퍼티가 먼저 선언한 프로퍼티를 덮어쓴다.  </li><li>문자열이나 문자열로 변환 가능한 값을 반환하는 표현식으로 프로퍼티 키를 동적으로 생성할 수 있으며<br>  이를 계산된 프로퍼티 이름(Computed Property name) 이라고 한다.  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">질문4: 프로퍼티 키는 식별자 역할을 할 뿐 식별자는 아닌 건가요?  </span><br><span class="line">존재하지 않는 프로퍼티 키에 접근했을 때 undefined 가 나오는 이유는 무엇인가요?</span><br></pre></td></tr></table></figure></li></ul></li><li><p>프로퍼티의 값  </p><ul><li>자바스크립트에서 사용 가능한 모든 값을 사용할 수 있다.  </li><li>프로퍼티 값이 함수일 경우 메소드(method) 라고 부른다.  </li><li>이미 존재하는 프로퍼티에 값을 할당하면 프로퍼티 값이 갱신된다.  </li><li>존재하지 않는 프로퍼티에 값을 할당하면 프로퍼티가 동적으로 생성되어 추가되고 값이 할당된다.  </li></ul></li><li><p>프로퍼티에 접근하는 방법  </p><ol><li>마침표 표기법 : <code>person.name</code>  </li><li>대괄호 표기법  <code>person[&#39;name&#39;]</code> -&gt; 따옴표로 감싸주지 않으면 식별자로 인식해 에러가 난다.  </li></ol></li><li><p>프로퍼티 삭제<br>  delete 연산자를 사용하며 존재하지 않는 프로퍼티를 삭제하려 할 경우 무시되고 에러가 나지 않는다.  </p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;7-제어문&quot;&gt;&lt;a href=&quot;#7-제어문&quot; class=&quot;headerlink&quot; title=&quot;7. 제어문&quot;&gt;&lt;/a&gt;7. 제어문&lt;/h2&gt;&lt;p&gt;코드는 원래 위에서부터 아래로 흐르며 순차적으로 진행되지만&lt;br&gt;제어문을 사용하게 되면 그 흐름을 깨
      
    
    </summary>
    
      <category term="Javascript" scheme="https://dearjsmc4.github.io/categories/javascript/"/>
    
    
      <category term="Javascript" scheme="https://dearjsmc4.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>ECMAScript &amp; Javascript</title>
    <link href="https://dearjsmc4.github.io/2019/05/02/0429/"/>
    <id>https://dearjsmc4.github.io/2019/05/02/0429/</id>
    <published>2019-05-01T15:00:00.000Z</published>
    <updated>2019-05-03T01:31:54.156Z</updated>
    
    <content type="html"><![CDATA[<h2 id="자바스크립트와-ECMA스크립트"><a href="#자바스크립트와-ECMA스크립트" class="headerlink" title="자바스크립트와 ECMA스크립트"></a>자바스크립트와 ECMA스크립트</h2><p>참고: <a href="https://medium.freecodecamp.org/whats-the-difference-between-javascript-and-ECMAscript-cba48c73a2b5" target="_blank" rel="noopener">What’s the difference between JavaScript and ECMAScript?</a></p><p><strong>ECMA International</strong>:<br>표준을 만드는 단체.<br>대부분의 키보드들이 같은 순서의 자음모음 순서를 가지고 있고 같은 위치의 스페이스 엔터 등등이 있다.<br>그건 바로 대부분의 키보드 회사들이 쿼티레이아웃이라는 표준을 가지고 키보드를 만들기 때문이다.<br>그런 표준을 만들어내는 곳이다.  </p><p><strong>ECMA-262</strong>:<br>ECMA international 에서 발표하는 표준.<br>스크립트 언어에서 통용되는 구체적 사양, 설명을 포함하고 있다.<br>ECMAScript의 명세번호라고 이해하자.  </p><p><strong>Scripting Language</strong>:<br>요소나 시스템 위에서의 <strong>동작</strong>을 위해 만들어진 프로그래밍 언어.<br>걷다, 달리다, 점프하다 와 같은 명령들을 생각해보자.<br>이런 동작들은 사람이나 개나 게임캐릭터들처럼 그것을 수행해줄 무언가가 필요하다.<br>이 명령을 수행할 대상이 없이는 걷고 뛰고 점프하는 행동 자체가 불가능하다.<br>이러한 행동들이 스크립트언어가 겉으로 보이는 요소들을 조작하고 제어하는것과 비슷하다.<br>(그러니까 내가 요소이고 나를 걷고 뛰고 점프하도록 조작하고 제어하는 역할을 하는 것이 스크립트언어 라고 보면 될 듯?<br>그래서 웹상에서 동작을 제어하는 자바스크립트가 스크립트언어라고 불리는 것이겠지.)  </p><p><strong>ECMAScript</strong>:<br>ECMA-262 기술규격에 정의된, 표준화된 스크립트 프로그래밍 언어.<br>스크립트 언어가 ECMAscript를 준수한다고 여겨지려면 반드시 지켜야하는 규칙과 세부사항, 가이드라인을 제공함.<br>스크립트언어의 기본 뼈대(코어)를 이룬다. 모든 스크립트 언어들이 기본적으로 갖춰야 하는 내용이니까.  </p><p><strong>Javascript</strong>:<br>ECMAscript 표준을 준수하는 스크립트 언어. ECMAscript 와 브라우저가 별도로 지원하는 WEB API 를 포함하는 개념.  </p><p><strong>Javascript Engine</strong>:<br>자바스크립트 코드를 이해하고 실행시킬 수 있는 통역기.<br>크롬의 v8, 파이어폭스의 스파이더몽키 등 웹 브라우저에서 사용된다.<br>브라우저의 자바스크립트 엔진은 사람이 언어를 이해하는 능력과 비슷하다.<br>자바스크립트 엔진은 걷다, 뛰다, 점프하다 와 같은 행동들이 어떤 뜻인지 <strong>이해</strong>한다.<br>사람이 걸으랄 때 걷고 점프하랄때 점프하고 뛰랄 때 뛸 수 있는 것도<br>그 행동들이 어떤 의미인지 알아듣기때문에 가능한 것.<br>그러니까 사람에게도 이런 자바스크립트 엔진이 들어있어서 그것들을 이해할 수 있다고 생각하면 될 듯.<br>해석해줄 엔진이 없다면 스크립트언어가 아무리 명령해도 알아들을 수 없겠지.<br>브라우저마다 엔진의 차이는 있다. 왜냐면 ECMAScript가 업데이트될 때 모든 브라우저들이 한꺼번에<br>업데이트 하는 것이 아니기 때문이며 각 브라우저의 엔진마다 어떻게 해석하고 구현할 것인지가 다르기 때문이다.  </p><h2 id="WEB-API"><a href="#WEB-API" class="headerlink" title="WEB API?"></a>WEB API?</h2><p>그 전에 API가 무엇인지부터 생각해보자.<br><strong>API</strong>는 어플리케이션 프로그래밍 인터페이스.<br>모든 언어는 API를 지원하고, 그 API를 사용해서 코딩을 하는 것이다.<br>우리가 애플리케이션을 구현하기 위해 시간의 순서대로 배치해야할 부품들.<br>우리가 쓰는 함수들. 우리가 만들지는 않았지만 간편히 사용 가능한, 그 언어가 가지고 있는 조작장치.  </p><p><strong>WEB API</strong>는 웹에서 여러 유용한 작업을 할 수 있도록 제공되는 API.<br>예를 들어 웹 오디오 API는 브라우저의 오디오를 조작하기 위한 메서드를 제공.<br>근데 그 뒷편에서 브라우저는 사실 더 복잡한 로우레벨코드를 실행 중.<br>내가 직접 그런 복잡한 일을 하지 않아도 되게 해주는 것이 브라우저 API.<br><code>setTimeout()</code>, <code>alert()</code> 같은 것들이 그 예시.<br>W3C에서 표준을 관리.<br>( 내가 직접 하려면 정말 복잡한 코드를 이해하고 쓸 줄 알아야 하지만<br>WEB API가 있음으로써 브라우저에서 내가 쉽게 할 수 있는 일들이 더 많아지는 것이라고 이해하면 되겠다. )  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;자바스크립트와-ECMA스크립트&quot;&gt;&lt;a href=&quot;#자바스크립트와-ECMA스크립트&quot; class=&quot;headerlink&quot; title=&quot;자바스크립트와 ECMA스크립트&quot;&gt;&lt;/a&gt;자바스크립트와 ECMA스크립트&lt;/h2&gt;&lt;p&gt;참고: &lt;a href=&quot;h
      
    
    </summary>
    
      <category term="Javascript" scheme="https://dearjsmc4.github.io/categories/javascript/"/>
    
    
      <category term="Javascript" scheme="https://dearjsmc4.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Browser Rendering</title>
    <link href="https://dearjsmc4.github.io/2019/05/02/0501/"/>
    <id>https://dearjsmc4.github.io/2019/05/02/0501/</id>
    <published>2019-05-01T15:00:00.000Z</published>
    <updated>2019-05-03T01:21:42.503Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>브라우저와 서버는 대부분 다른 컴퓨터에 있다.<br>브라우저는 사용자 컴퓨터(어느나라의 어디의 누가 어떤 브라우저로 접속할지는 모른다)에 있고,<br>서버는 모든 상황에, 최대한 많은 브라우저를 대응하려 노력한다. 심지어 익스 7,8까지도…<br>(한국에서는 익스 9이상은 지원해줘야한다)  </p><p>브라우저와 서버는 통신을 해야 하는데, 이를 위해 서버사이드 프로그램과 브라우저가 약속을 한다.<br>“http:// 는 <strong>http</strong> 라는 통신규약(서버와 브라우저간의 약속)을 사용해 정보를 교환하겠다는 뜻이다.”<br>브라우저가 서버에게 이니셜 요청을 했을때 주소창의 주소가 <code>https://www.naver.com</code> 이라면,<br>“나는 통신을 <code>https</code> 로 할거고, <code>www.naver.com</code> 이라는 서버로 페이지를 요청할거야.” 라는 뜻.<br>도메인네임서버에서 도메인을 IP주소로 변환한 뒤, IP주소로 서버의 위치를 알고 연결해준다.<br>만약 페이지를 요청하는 구문이 아무것도 없으면 서버는 메인페이지(index.html)을 보내는 것으로 기본 설정이 되어 있기에,<br>브라우저는 네이버의 메인 페이지를 받게 된다.  </p><pre><code>파일은 어떻게 받지? -&gt; 케이블을 타고 패킷으로!  컴퓨터가 갖고 있는 파일은 0과 1로 이루어진 이진수의 집합체.  패킷은 데이터를 일정한 크기로 자른 것이다.  그 패킷들이 순서대로 시냇물 흐르듯 전송된다고 해서 스트림(stream) 이라고 한다.  </code></pre><h2 id="HTML-CSS-파싱"><a href="#HTML-CSS-파싱" class="headerlink" title="HTML/CSS 파싱"></a>HTML/CSS 파싱</h2><p>클라이언트 사이드에서는 index.html 파일(순수한 텍스트파일)을 받아서 메모리에 올린 후 파싱(해석)한다.<br><strong>파싱</strong>은 사람이 보기 좋으라고 써둔 소스코드를 브라우저가 이해하고 실행할 수 있도록 해석하는 것이다.<br>파일을 로드한(다운로드 받은) 상태에서 코드를 한 줄씩 읽다가<br>의미가 있는 내용이면 메모리에 기억하는데, 그 유의미한 정보를 <strong>토큰</strong>이라고 한다.  </p><pre><code>HTML은 부자관계로 이루어진다. nesting, 중첩.  네스팅된 자식태그는 자식노드가 된다.  </code></pre><p>만약 link태그를 만나 CSS를 로딩해야 할 때가 되면, HTML의 파싱을 중단하고 다시 http를 이용해 서버에게 요청한다.<br>“나 style.css 라는 것 좀 줘.”(모든 파일은 서버에 있으니까)<br>서버는 해당 파일을 가지고 있는 곳에 가서 파일을 찾아서 패킷으로 잘라서 보낸다.<br>클라이언트는 파일을 받아서 메모리에 올리고 <strong>CSS 파싱</strong>을 시작한다.<br>CSS에는 선택자(selector)가 있고, 선택자와 선언블럭으로 이루어진 것을 룰셋이라고 부른다.  </p><pre><code>body{    font-size : 16px;}</code></pre><p>이 룰셋들을 파서가 읽고 메모리에 써둔다. “body는 font-size가 16픽셀이더라” 라고.  </p><p>CSS 파싱을 다 마치면 <strong>CSSOM 트리</strong>가 완성되고, HTML 파싱을 중단한 시점부터 다시 시작한다.<br>HTML 파싱을 다 마치면 <strong>DOM 트리</strong>가 완성된다.  </p><p>DOM 트리(HTML의 파싱결과)와 CSSOM 트리(CSS의 파싱결과)가<br>브라우저가 관리하고있는 메모리에 자료구조로 만들어지면<br>DOM 트리와 CSSOM 트리를 합쳐서(merge) 렌더트리(렌더링 하기위한 트리)를 만든다.<br>이 렌더트리를 가지고 드디어 화면에 그리기 시작한다.  </p><p>이 모든 일은 브라우저안에있는 <strong>렌더링 엔진</strong>이라는 프로그램이 한다.  </p><h2 id="자바스크립트-파싱"><a href="#자바스크립트-파싱" class="headerlink" title="자바스크립트 파싱"></a>자바스크립트 파싱</h2><p>자바스크립트의 처리는 <strong>자바스크립트엔진</strong>이라는 프로그램이 한다.<br>HTML 파싱을 하다가 스크립트 태그를 만나면 HTML파싱이 멈춘다.<br>이것을 <strong>블로킹</strong>이 걸렸다고 한다.<br>스크립트 태그가 src 속성을 안 가지고 있다면 스크립트가 내장되어 있는 것이고,<br>src 속성을 가지고 있다면 서버에서 파일을 가져온다.  </p><p>자바스크립트 엔진은 소스코드를 분석하며 의미를 갖는 최소 단위인 토큰들로 분리한다.  </p><p><code>var a = 0;</code> 일 때<br><code>var</code>, <code>a</code>, <code>=</code>, <code>0</code>, <code>;</code> 이 모두 토큰이다.</p><p>그리고 토큰들의 집합을 파싱하면서 <strong>신택스 트리</strong>, AST(Abstract Syntax Tree)를 만든다.  </p><p>(자바스크립트엔진이 자바스크립트문법으로 이해했다는 뜻.<br>이해할 수 있다면 실행할 수 있다는 뜻이고, 명령을 할 수 있다는 뜻이다.)  </p><p>파싱한 상태에서 바이트코드로 한 번 더 바꾼 후 실행을 하는데,<br>이때 돔과 관련이 있다면 <strong>돔을 조작</strong>할 수 있게 된다.<br>만약 스크립트가 헤드에 있다면 돔트리가 완성이 안된 상태라서 돔 조작이 불가능하다.<br>자바스크립트는 돔트리와 씨솜트리가 완성된 상태에서 실행해야 의미가 있다.  </p><pre><code>- 그럼에도 스크립트태그를 헤드에 써야 한다면...  async: 병렬처리. 비동기. HTML파싱이 안 끝나도 js파싱이 끝나면 바로 실행한다.  defer: 파싱은 빨리하고 실행은 HTML 파싱이 끝나고 나중에 한다.  (그러나 둘 다 IE9이하에서는 지원이 안 되거나 부분지원 된다고 하니 그냥 body태그 아래에 쓰도록 하자)  </code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;HTTP&quot;&gt;&lt;a href=&quot;#HTTP&quot; class=&quot;headerlink&quot; title=&quot;HTTP&quot;&gt;&lt;/a&gt;HTTP&lt;/h2&gt;&lt;p&gt;브라우저와 서버는 대부분 다른 컴퓨터에 있다.&lt;br&gt;브라우저는 사용자 컴퓨터(어느나라의 어디의 누가 어떤 브라우
      
    
    </summary>
    
      <category term="Javascript" scheme="https://dearjsmc4.github.io/categories/javascript/"/>
    
    
      <category term="Javascript" scheme="https://dearjsmc4.github.io/tags/javascript/"/>
    
      <category term="Web" scheme="https://dearjsmc4.github.io/tags/web/"/>
    
      <category term="HTML" scheme="https://dearjsmc4.github.io/tags/html/"/>
    
      <category term="CSS" scheme="https://dearjsmc4.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Javascript Basic</title>
    <link href="https://dearjsmc4.github.io/2019/05/02/js-basic/"/>
    <id>https://dearjsmc4.github.io/2019/05/02/js-basic/</id>
    <published>2019-05-01T15:00:00.000Z</published>
    <updated>2019-05-03T01:32:03.779Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h1><p><strong>프로그래밍 입력, 저장, 처리, 출력에 관한 문법을 배워야 한다.</strong>  </p><ul><li>입력: ex) prompt.<br>보통 웹상에서의 입력은 form 으로 받는다.  </li><li>저장: 변수를 이용한 저장. 쿠키 or 웹 스토리지  </li><li>처리: 연산. 분기. 반복.  </li><li>출력: 화면에 DOM을 추가.  </li></ul><h2 id="변수란"><a href="#변수란" class="headerlink" title="변수란?"></a>변수란?</h2><p>컴퓨터 프로그래밍에서 어떤 값을 담는 그릇. 이 그릇에도 종류라는 것이 있는데,  </p><ul><li>일반/원시타입: <strong>숫자, 문자, 불대수</strong>  </li><li>여러종류를 담는 그릇: <strong>배열. (리스트. 딕트. 튜플. 셋)</strong><br>변수는 만들고, 값을 읽고, 값을 바꾸고, 값을 사용(연산의 피연산자, 함수의 매개변수)하게 된다.  </li></ul><p><code>a = “hi”</code> -&gt; a라는 이름을 가진 저장공간을 만들고, 그 안에 “hi”라는 값을 저장(할당)한다는 뜻.<br><code>alert(a);</code> -&gt; 알림창에 hi<br>a : a라는 저장공간의 이름(이름으로 부를때) / a라는 이름을 가진 저장공간(사용할 때)<br>= : 할당연산자. 저장하는 연산자. hi 를 a에 저장하라는 의미.<br>보통 = 은 같다는 의미인데. 프로그래밍에서는 저장한다는 의미가 되고, 같다는 == 로 표현.  </p><p>변수명을 사용하게 되면 해당 내용의 용도가 명확해진다.<br>그러므로 무엇이 담겼는지 명확히 알려줘야한다.  </p><p>숫자, 불리언값 등은 값을 그대로 쓰지만,<br>문자열은 홑따옴표/쌍따옴표로 감싸서 표기한다. 왜? -&gt; 그냥 쓰면 변수 혹은 예약어등과 헷갈릴 수 있기 때문이다.<br><code>Name = jake;</code> -&gt; jake 가 다른 변수인가?</p><p><strong>이스케이프 문자</strong><br>쌍따옴표안에 쌍따옴표를 쓰고 싶을 때 백슬래시를 넣으면 되는데 이를 이스케이프문자라고 한다.<br>어떤 특별한 목적과 기능이 있는 문자라는 것. ex) <code>\n</code> 은 줄바꿈. New line 이라는 것.  </p><h3 id="변수명을-만들-때-주의할-것"><a href="#변수명을-만들-때-주의할-것" class="headerlink" title="변수명을 만들 때 주의할 것"></a>변수명을 만들 때 주의할 것</h3><ol><li>숫자는 변수이름 맨 앞에 사용하지 않을 것.  </li><li>특수문자는 언더바만 사용할 것.  </li><li>대소문자를 구분할 것.  </li><li>명사, 동사로만 작성할 것.  </li><li>예약어는 사용 금지.  </li></ol><h3 id="변수명을-작성하는-방법"><a href="#변수명을-작성하는-방법" class="headerlink" title="변수명을 작성하는 방법"></a>변수명을 작성하는 방법</h3><ol><li>카멜 케이스 : yourName  </li><li>파스칼 케이스 : YourName  </li><li>스네이크 케이스 : your_name  </li><li>+헝가리안 표기법 : strName/ intNumber (변수명 앞에 어떤 데이터타입인지 적어주는 방법)  </li></ol><p>demo 라는 아이디를 찾지 못한다고 오류가 떴던 이유 :<br>자바스크립트는 dom객체를 제어해서 글씨를 띄우려고 했는데,<br>위에서부터 읽다보니 demo 를 찾기도 전에 자바스크립트를 만나버린 것. 순차문제인것이다.<br>그래서 스크립트블록을 바디 맨 아래로 바꾸면 해결된다.  </p><h2 id="프로그래밍-진행방식-세-가지"><a href="#프로그래밍-진행방식-세-가지" class="headerlink" title="프로그래밍 진행방식 세 가지"></a>프로그래밍 진행방식 세 가지</h2><ul><li>순차: 위에서부터 아래로 한줄씩 실행해나가는 것.  </li><li>분기: a를 실행할지 b를 실행할지 선택하는 것. (조건에 따라서)  </li><li>반복: 컴퓨터는 반복적으로 빠르게 일을 잘한다. a,b중에 실행할 코드를 여러 번 반복하는 것.  </li></ul><p>document는 페이지문서 자체를 말한다.<br>document 에서 요소를 아이디로 찾을 때 -&gt; <code>document.getElementById</code></p><p>Prompt 로 받은 값은 모두 문자열이 된다. 그래서 1+2 = 12    </p><ul><li>산술연산자: +, -, *, /, %(나머지 구하기.), **(거듭제곱)  </li><li>문자연산자: + (문자를 이어붙임)  </li></ul><p>문자로 받았지만 산술연산을 해야 할 때 -&gt; type casting 형변환이 필요하다.<br><code>number(“값”)</code> -&gt; 값이 숫자가 된다. (꼭 대문자로 시작하게 써줘야함!)  </p><h2 id="자바스크립트의-5가지-데이터-타입"><a href="#자바스크립트의-5가지-데이터-타입" class="headerlink" title="자바스크립트의 5가지 데이터 타입"></a>자바스크립트의 5가지 데이터 타입</h2><ul><li>number  </li><li>string  </li><li>boolean<br>(숫자, 문자, 불린은 형변환 가능)  </li><li>null(아무값도없음)  </li><li>undefines(정의되지않음)  </li></ul><h2 id="if-조건문"><a href="#if-조건문" class="headerlink" title="if 조건문"></a>if 조건문</h2><p>if문에서는 if 가 필수고, else if 나 else 는 필수가 아니다.  </p><p>if : 만약 조건식이 참이라면, 해당 부분의 실행구문을 실행하겠다.(하나의 if문에는 하나의 if만 들어갈수있다.)<br>else if : 그게 아니라 다음 조건식이 참이라면, 해당 부분의 실행구문을 실행하겠다.(0번부터 여러 번)<br>else : 이도저도 아니면, 해당 부분의 실행구문을 실행하겠다. (여긴 조건식이 없다. 이도저도 아닐때니까.)<br>실행구문은, 우리가 쓰고싶은 어떤 코드든 가능하다.  </p><p><strong>조건식은 명제</strong><br>참과 거짓을 판별할 수 있는 문장. 결과값이 참과 거짓으로만 나오는 문장.<br>True/false,  1/0 로 표기. -&gt; boolean 값. Bool.<br>비교구문이 제일 많다. &gt;, &lt;, &gt;=, &lt;=, ==, != …  </p><p>===, !== 는 종류까지 같은지 판별한다.  </p><ul><li>1 == true<br>true. 1은 곧 true 이다.  </li><li>1 === true<br>false. 데이터타입이 다르다. 1은 숫자이고 true 는 불린 값이다.</li></ul><h2 id="반복문"><a href="#반복문" class="headerlink" title="반복문"></a>반복문</h2><ul><li><p>몇 번을 반복할 것인가<br>for([초기화] ; [조건문] ; [증감식]){<br>  [실행할 코드]<br>}  </p></li><li><p>조건에 맞는 동안 반복<br>  While ([조건식]) { [실행할 코드] }<br>  While(true) = 무한반복  </p><ul><li>break : 만나는 순간 가장 가까운 반복문을 탈출한다.  </li><li>continue : 만나는 순간 반복문이 다음 회차로 이동하여 넘어간다.  </li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Javascript&quot;&gt;&lt;a href=&quot;#Javascript&quot; class=&quot;headerlink&quot; title=&quot;Javascript&quot;&gt;&lt;/a&gt;Javascript&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;프로그래밍 입력, 저장, 처리, 출력에 관한 문법을 배
      
    
    </summary>
    
      <category term="Javascript" scheme="https://dearjsmc4.github.io/categories/javascript/"/>
    
    
      <category term="Javascript" scheme="https://dearjsmc4.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>예습과 질문정리(1)</title>
    <link href="https://dearjsmc4.github.io/2019/05/02/0430/"/>
    <id>https://dearjsmc4.github.io/2019/05/02/0430/</id>
    <published>2019-05-01T15:00:00.000Z</published>
    <updated>2019-05-03T01:31:58.158Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-자바스크립트-개발-환경과-실행-방법"><a href="#3-자바스크립트-개발-환경과-실행-방법" class="headerlink" title="3. 자바스크립트 개발 환경과 실행 방법"></a>3. 자바스크립트 개발 환경과 실행 방법</h2><p>자바스크립트는 브라우저와 Node.js 환경에서 실행할 수 있지만 브라우저와 Node.js는 존재 목적이 다르기에 ECMAScript 외의 추가적 기능은 서로 호환되지 않고 각각의 환경에 맞게 제공되는 API가 따로 있다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">질문1: 런타임은 코드가 실행되는 시점이고 런타임 환경은 코드가 돌아가는 환경이라고 이해하면 되는지?</span><br><span class="line">-&gt; 그렇게 이해하면 된다.</span><br></pre></td></tr></table></figure></p><p>웹 브라우저에서 자바스크립트를 body의 아래쪽에 두어 DOM이 완성된 후에 조작할 수 있도록 하면 에러를 방지하고 렌더링에 지장을 주지 않을 수 있다.  브라우저의 개발자도구에서는 웹 개발에 필요한 여러 기능을 사용할 수 있다. 특히 콘솔에서는 에러를 확인하거나 간편하게 값을 확인할 수 있고, 에러 확인 후 Source 패널에서 바로 디버깅을 할 수 있어 유용하다.<br>서버 개발 환경을 제공하는 Node.js 에서는 서버 사이드 개발에 필요한 API를 제공한다.<br><strong>Single Page Application</strong>: 서버로부터 새로운 페이지를 불러오는 게 아니라 현재의 페이지를 동적으로 다시 작성하는 웹 애플리케이션이나 웹 사이트. 어떤 사이트에서 메뉴를 클릭했을 때 새로운 페이지를 불러오는 게 아니라 현재 페이지에서 내용만 바뀌도록 하는 것. HTML 페이지가 아니라 데이터만 오간다. 그래서 I/O가 빈번하게 일어남. 페이지가 하나뿐인 사이트. 싱글페이지.</p><h2 id="4-변수"><a href="#4-변수" class="headerlink" title="4. 변수"></a>4. 변수</h2><p>어떤 값을 메모리에 저장하고 재사용하기 위해 쓰는 것이 변수.<br>var num = 10; 의 형태로 선언한다.<br>변수에 값을 저장하는 것을 <strong>할당</strong>이라 하고 불러올 때는 <strong>참조</strong>한다고 한다.<br>이때 var는 <strong>키워드</strong>, num은 <strong>변수명(식별자)</strong>, = 는 <strong>할당연산자</strong>, 10은 <strong>변수값</strong>이다.<br>식별자는 단지 변수명만 뜻하는 것이 아니라 함수명이나 클래스 등 값을 구별하여 식별할 수 있는 모든 고유한 이름을 의미한다.<br>자바스크립트 엔진이 키워드를 만나면 약속되어진 동작을 실행한다. 키워드는 일종의 명령어이다.<br>var 키워드를 만나면 자바스크립트 엔진은 변수를 선언한다.<br>변수 선언에는 두 단계가 있다.  </p><ol><li>선언 단계:<br>자바스크립트 엔진에 새로운 변수의 존재를 알려 값을 저장할 메모리 공간을 확보한다. 메모리 주소에 변수명을 매핑한다.  </li><li>초기화 단계:<br>선언 한 후 아무런 값도 할당하지 않으면 자바스크립트 엔진은 메모리공간에 undefined 라는 값을 암묵적으로 할당한다.<br>초기화단계를 거치지 않으면 이전에 다른 애플리케이션이 사용했던 쓰레기값이 남아 참조될 수 있다.  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">질문2: 변수를 참조하는 것이 아무것도 없으면 자동으로 해제되는데 쓰레기값이 어떻게 남아있을 수 있는지?  </span><br><span class="line">-&gt; 메모리는 브라우저만 쓰는 것이 아니라 다른 애플리케이션들과 함께 쓰는 것이다.  </span><br><span class="line">내가 변수를 직접 할당한 적이 한 번도 없지만 다른 애플리케이션이 썼을 수도 있고,  </span><br><span class="line">그래서 쓰레기값이 남아있을 수도 있다.</span><br></pre></td></tr></table></figure></li></ol><p>변수를 사용하려면 꼭 선언을 해야 한다.<br>내가 선언하지않은 변수를 불러오려하면 자바스크립트 엔진은 당연히 선언한 적 없는 변수명과 변수값을 찾아야하고 결국 못찾으므로 참조에러가 난다.<br><strong>호이스팅</strong>:<br>Hoist = 들어올리다. 변수선언문이 마치 변수를 참조하는 코드 위쪽으로 끌어올려진 것처럼 동작하는 것.<br>자바스크립트 엔진은 코드를 한 줄 한줄 읽어내려가기 전에 먼저 소스코드 전체를 평가하고 선언문을 찾아내서 식별자를 등록한다.<br>그래서 변수선언문이 변수를 참조할 코드보다 늦게 쓰였음에도 참조에러가 나지 않는다.<br>코드가 한줄씩 실행될때에는 이미 식별자가 등록이 된 상태이기때문이다. 단, 선언은 파싱타임때 되지만 값의 <strong>할당</strong>은 런타임에 실행된다.  </p><p>값을 재할당할때에는 메모리공간에 할당되어있던 원래 값을 지우는 것이 아니라 새로운 메모리 공간에 할당된다.<br>그리고 이전에 할당된 메모리공간은 가비지컬렉터에 의해 자동으로 해제된다.</p><h2 id="5-데이터타입"><a href="#5-데이터타입" class="headerlink" title="5. 데이터타입"></a>5. 데이터타입</h2><p>값은 데이터타입을 가진다. 데이터타입은 값을 저장할 때 확보해야하는 메모리공간의 크기를 결정한다.<br>그리고 값을 불러올 때 그 데이터타입에 할당되는 메모리공간만큼 한번에 읽어야 손실이 없다.<br>또한 그 읽어들인 2진수를 어떻게 해석할지 역시 데이터타입을 참고하여 결정한다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">질문3: 데이터타입마다 할당되는 메모리 공간이 다르기 때문에 그 공간의 크기를 참고해서 어떻게 해석할지 결정하는 것인가?</span><br></pre></td></tr></table></figure></p><p>값: 더 이상 평가할 수 없다. 30을 평가하면 30이다.<br>값을 생성하는 다양한 방법. 표현식.  </p><ol><li>리터럴 표기법: 리터럴을 생성.<br>리터럴은 직접 고정된 값 자체.  </li><li>표현식: 하나의 값으로 평가되는 문. 10+20을 평가하면 30이다.  </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">질문4: 리터럴은 내가 직접 지정한 값이고 리터럴과 연산자의 조합인 표현식으로 만들어진 값은 리터럴이 아닌가?  </span><br><span class="line">왜 리터럴과 다른 값을 구분하는지?</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">질문5: 자바스크립트는 숫자타입을 왜 다 실수로 처리하나(컴공시간에 배운것같은데 잘 이해하지 못했음)  </span><br><span class="line">-&gt; 자바스크립트는 다른 언어들과 달리 short, int, float 과 같은 다양한 숫자타입이 없으니까 </span><br><span class="line">International IEEE 754 standard에 따라 double로 처리하는 것이라고 한다.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">질문6: 널값은 변수에 값이 없다는 것을 의도적으로 명시한것임에도 가비지컬렉터가 메모리를 해제하나?  </span><br><span class="line">어차피 가비지컬렉터에 의해 해제될 빈 메모리공간이라면 널값을 의도적으로 명시하는 상황은 어떤 경우인지?  </span><br><span class="line">그럼 널값 할당은 메모리공간을 비우라는 명령이 될 수도 있는건가?  </span><br><span class="line">-&gt; 자바스크립트의 널값이 다른 언어와 달라서 생긴 의문인 듯 하다. 변수에 null 을 할당하는 것은 사실  </span><br><span class="line">메모리공간에 null 이 들어가는 것이 아니라 변수의 참조를 끊는 것과 같다. 참조가 끊어지니  </span><br><span class="line">메모리공간에 있던 값은 자연스럽게 가비지컬렉터에 의해 사라지고, 식별자만 남는다.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">질문7: null의 데이터타입이 null 이 아니라 object 가 나오는 이유?  </span><br><span class="line">-&gt; 설계의 문제인듯.. null타입 확인 시에는 일치연산자 사용할것.. 그럼 애초에 왜 그렇게 설계된건지  </span><br><span class="line">-&gt; 이것은 토끼굴에 빠질 가능성이 높은 듯 하다</span><br></pre></td></tr></table></figure><p>동적타입언어: 변수에 할당되는 값에 따라 데이터타입이 동적으로 바뀐다.<br>정적타입언어: 선언된 변수의 데이터타입에 맞는 값만을 할당할 수 있다.  </p><h2 id="6-연산자"><a href="#6-연산자" class="headerlink" title="6. 연산자"></a>6. 연산자</h2><p>문과 표현식.<br>문(statement): 하나 이상의 표현식과 키워드의 조합으로 자바스크립트 엔진에게 내리는 명령.<br>문이 실행되면 무슨 일이 일어나게 되어있다. 이 명령의 집합으로 이루어진 것이 프로그램. 문의 끝에는 세미콜론을 붙인다.<br>표현식은 평가되어 값을 만들고, 문은 표현식으로 생성한 값을 사용해 명령을 내린다.<br>표현식인 문은 값으로 평가할 수 있고, 표현식이 아닌 문은 값으로 평가할 수 없다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">질문8: 문이 표현식이 될 수 없다는 건 무슨 뜻인지  </span><br><span class="line">-&gt; 표현식은 값을 만들어내는 것에 비해 조건문, 반복문 같은 문들은 값을 만드는 것이 아니라 어떤 일을 하기 때문이다.  </span><br><span class="line">물론 표현식도 평가라는 일을 하고, 조건문도 비교연산을 통해 불리언 값을 만들긴 하지만,  </span><br><span class="line">그건 표현식과 문이 중점적으로 하는 일은 아니다.</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">질문9: 표현식이 문이 될 수 있다는 건 표현식이 어떤 값으로 평가되는 &apos;일&apos;이 일어나기 때문인가?</span><br></pre></td></tr></table></figure><p>이항산술연산자: 두 개의 피연산자를 산술연산하여 새로운 값을 만든다. 피연산자의 값이 바뀌지 않는다.<br>단항산술연산자: 한 개의 피연산자를 산술연산하여 숫자타입값을 만든다. 피연산자의 값이 바뀐다.  </p><p>증가/감소 연산자(++/–)는 위치에 따라 의미가 다르다.<br>피연산자 앞에 위치하면 먼저 피연산자의 값을 증가/감소 시킨 후 다른 연산을 수행하고,<br>피연산자 뒤에 위치하면 다른 연산을 수행한 후에 피연산자 값을 증가/감소 시킨다.  </p><p><code>+</code> 단항 연산자는 숫자타입이 아닌 피연산자에 사용 시 피연산자를 숫자타입으로 변환시킨 값을 반환한다.<br><code>-</code> 단항 연산자는 <code>+</code> 단항 연산자와 같은 기능을 하고, 피연산자의 부호를 반전한 값을 반환한다.<br>삼항조건연산자: 조건식의 평가결과에 따라(조건식이 true일 때 &amp; false일 때) 반환할 값을 결정.  </p><p>논리합 연산자(||) : 둘 중 하나만 true 이더라도 true 반환<br>논리곱 연산자(&amp;&amp;) : 둘 다 true 여야 true 반환<br>논리부정 연산자(!) : 부정을 긍정으로, 긍정을 부정으로 바꾼다.  </p><ul><li>!true = false  </li><li>!false = true  </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;3-자바스크립트-개발-환경과-실행-방법&quot;&gt;&lt;a href=&quot;#3-자바스크립트-개발-환경과-실행-방법&quot; class=&quot;headerlink&quot; title=&quot;3. 자바스크립트 개발 환경과 실행 방법&quot;&gt;&lt;/a&gt;3. 자바스크립트 개발 환경과 실행 방법
      
    
    </summary>
    
      <category term="Javascript" scheme="https://dearjsmc4.github.io/categories/javascript/"/>
    
    
      <category term="Javascript" scheme="https://dearjsmc4.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Installing Hexo</title>
    <link href="https://dearjsmc4.github.io/2019/03/17/Installing-Hexo/"/>
    <id>https://dearjsmc4.github.io/2019/03/17/Installing-Hexo/</id>
    <published>2019-03-17T03:27:59.000Z</published>
    <updated>2019-05-02T04:35:44.709Z</updated>
    
    <content type="html"><![CDATA[<h2 id="헥소-설치"><a href="#헥소-설치" class="headerlink" title="헥소 설치"></a>헥소 설치</h2><p><a href="https://hexo.io/docs/" target="_blank" rel="noopener">https://hexo.io/docs/</a><br>헥소 사이트로 이동하여 시키는 대로 하다보면 되던데<br>기억을 더듬어서 순서를 적어보자…</p><p><img src="/img/git.png" alt="screenshot"></p><p>갑자기 망할 놈(…) 소리를 들었는데<br>다른 게 아니라 Git 이다. <del>번역기가 잘못했네</del><br>헥소 설치 전에 Node.js와 Git 을 설치해야 한다.</p><p>$ npm install -g hexo-cli<br>그리고 설치 시작</p><p>Hexo가 설치되면 다음 명령을 실행하여 초기화한다.</p><p>$ hexo init 폴더명<br>폴더를 만들고<br>$ cd 폴더명<br>그 폴더로 이동하여<br>$ npm install<br>설치</p><p>앞으로 글을 쓸 때 내가 init 한 그 폴더에서 작업하면 된다.</p><p>글을 올릴 때는<br>$ hexo deploy<br>명령을 쓰면 되는데 그 전에 내가 글을 올릴 곳을 설정해줘야한다.</p><p>나는 깃을 쓰니까<br>$ npm install hexo-deployer-git –save<br>hexo-deployer-git 을 설치해야한다.<br>그리고 _config.yml 파일을 열면 설정을 수정할 수 있다.</p><p>몇 가지 커맨드로 간단히 글을 포스팅할 수 있다.</p><p>$ hexo new post 포스트제목<br>포스트제목에 만약 공백이 있으면 “” 로 묶어줘야한다.</p><p>$ hexo generate<br>(정적 파일을 생성)<br>$ hexo server<br>(서버를 확인)<br>$ hexo deploy<br>(글을 업로드)</p><p>정리하다보니 이게 정말 간단한건지…<br>네이버 블로그에 익숙한 내게는 조금 불편하긴 하다.<br>아직 익숙하지 않아서 그럴지도.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;헥소-설치&quot;&gt;&lt;a href=&quot;#헥소-설치&quot; class=&quot;headerlink&quot; title=&quot;헥소 설치&quot;&gt;&lt;/a&gt;헥소 설치&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noope
      
    
    </summary>
    
      <category term="기타" scheme="https://dearjsmc4.github.io/categories/%EA%B8%B0%ED%83%80/"/>
    
    
  </entry>
  
</feed>
